from flask import Flask, request, jsonify, session, render_template, redirect, url_for, flash
import spotipy
from anthropic import Anthropic
from anthropic.types import MessageParam
import os
from spotipy.oauth2 import SpotifyOAuth, SpotifyClientCredentials
from flask_cors import CORS
from flask_wtf import FlaskForm
from wtforms import StringField, SubmitField, SelectField, TextAreaField
from datetime import datetime

app = Flask(__name__)
env_config = os.getenv("PROD_APP_SETTINGS", "config.DevelopmentConfig")
app.config.from_object(env_config)
CORS(app)
app.config['SECRET_KEY'] = os.urandom(64)

sp_oauth = SpotifyOAuth(
    client_id=os.getenv('SPOTIPY_CLIENT_ID'),
    client_secret=os.getenv('SPOTIPY_CLIENT_SECRET'),
    redirect_uri='https://spotimix123.onrender.com/callback',
    scope='playlist-modify-public user-top-read'
)
#http://localhost:5000/callback = redirect_uri host
#https://spotimix123.onrender.com/callback = redirect_uri 

client = Anthropic(api_key='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')

@app.route("/", methods=["GET", "POST"])
def index():
    is_session = session.get('token_info') is not None
    return render_template("index.html", is_session=is_session)

@app.route('/process', methods=['POST'])
def process_form():
    prompt = request.form['prompt']
    return redirect(url_for('playlist', prompt=prompt))

@app.route("/playlist", methods=["GET", "POST"])
def playlist():
    
    client_credentials_manager = SpotifyClientCredentials()
    sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
    prompt = request.args.get('prompt')
    message = client.messages.create(
        model='claude-3-5-sonnet-20240620',
        #claude-3-5-sonnet-20240620
        #claude-3-haiku-20240307

        max_tokens=1024,
        tools=[
            {
                "name": "output_song",
                "description": "Generate song recommendations based on user input prompts.",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "songs": {
                            "type": "object",
                            "description": "A dictionary of around 20 recommended songs that are on Spotify, where keys are song titles and values are artists"
                        }
                    },
                    "required": ["songs"]
                }
            },
            
        ],
        tool_choice={"type": "tool", "name": "output_song"},
        messages=[{"role": "user", 
                "content": [
                {
                    "type": "text",
                    "text": f'{prompt}'
                }
            ]}]
    )
    word = client.messages.create(
            model='claude-3-haiku-20240307',
            #claude-3-5-sonnet-20240620
            #claude-3-haiku-20240307

            max_tokens=50,
            tools=[
                {
                    "name": "generate_Word",
                    "description": "User will give a playlist idea. generate a list describing the prompt",
                    "input_schema": {
                        "type": "object",
                        "properties": {
                            "word": {
                                "type": "array",
                                "description": "a python list with 3 elements. a word describing main idea of the playlist, and two colors that best match the mood of that word. No white."
                            }
                        },
                        "required": ["word"]
                    }
                },
                
            ],
            tool_choice={"type": "tool", "name": "generate_Word"},
            messages=[{"role": "user", 
                    "content": [
                    {
                        "type": "text",
                        "text": f'{prompt}'
                    }
                ]}]
        )

    

    tool_use_block = message.content[0]
    songs = tool_use_block.input['songs']  #dictionary with songs generated by claude
    song_dict = {}

    i = 1
    for song_name, artist in songs.items():
        query = f"track:{song_name} artist:{artist}"
        results = sp.search(q=query, limit=1)

        if results['tracks']['items']:
            track = results['tracks']['items'][0]
            track_id = track['id']
            track_info = sp.track(track_id)
            track_url = track_info['external_urls']['spotify']
            track_name = track['name']
            track_artist = track['artists'][0]
            track_artist_name = track_artist['name']

            album = track['album']
            album_name = album['name']
            release_date_spotify = album['release_date']
            if len(release_date_spotify) == 7:
                release_date_obj = datetime.strptime(release_date_spotify, "%Y-%m")
                release_date = release_date_obj.strftime("%b, %Y")
            elif len(release_date_spotify) == 10:
                release_date_obj = datetime.strptime(release_date_spotify, "%Y-%m-%d")
                release_date = release_date_obj.strftime("%b %d, %Y")
            else:
                release_date = release_date_spotify
            duration_ms = track['duration_ms']
            duration_s = duration_ms / 1000
            duration_s_remainder = (duration_ms % 1000) / 1000 * 60 
            duration_m = duration_s // 60
            duration_s_remainder_final = duration_s_remainder % 60
            duration = f"{int(duration_m)}:{int(duration_s_remainder_final):02}"

            if album['images']:
                image_url = album['images'][0]['url']
            else:
                image_url = None

            song_dict[track_name] = [track_artist_name, image_url, album_name, release_date, duration, i, track_url, track_id]
            i = i + 1
        else:
            print(f"Could not find '{song_name}' by {artist}")

    return render_template("playlist.html", song_dict=song_dict, prompt=prompt, word = word.content[0].input['word'])

@app.route('/create_playlist', methods=['POST'])
def create_playlist():
    if not session.get('token_info'):
        return redirect(url_for('authorize'))

    token_info = session.get('token_info')
    if sp_oauth.is_token_expired(token_info):
        token_info = sp_oauth.refresh_access_token(token_info['refresh_token'])
    session['token_info'] = token_info
    title = request.args.get('title')
    title = request.form['title']
    sp = spotipy.Spotify(auth=token_info['access_token'])
    user_id = sp.current_user()['id']
    song_ids = request.form.getlist('song_ids')
    playlist_name = f"{title}"
    playlist = sp.user_playlist_create(user=user_id, name=playlist_name)
    playlist_id = playlist['id']
    sp.playlist_add_items(playlist_id, song_ids)    

    playlist_url = playlist['external_urls']['spotify']
    playlist_id = playlist_url.split("/")[-1]
    playlist_uri = f"spotify:playlist:{playlist_id}"
    return redirect(playlist_uri)

@app.route('/authorize')
def authorize():
    auth_url = sp_oauth.get_authorize_url()
    return redirect(auth_url)

@app.route('/callback')
def callback():
    code = request.args.get('code')
    token_info = sp_oauth.get_access_token(code)
    session['token_info'] = token_info
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)
    app.logger.info()
